"""
Design a class which receives a list of words in the constructor, and implements
a method that takes two words word1 and word2 and return the shortest distance
between these two words in the list. Your method will be called repeatedly many
times with different parameters.

Example:
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3
Input: word1 = "makes", word2 = "coding"
Output: 1
Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.
"""
"""
Algorithm:
1. Since shortest method will be called multiple times, declare a map in the class with
key(str) as word and value(int[]) as indexes of the word
2. Increment the smaller index to approach the minimum difference
"""

import sys
class WordDistance:
    def __init__(self, words):
        self.map = {} # str: int[]
        for i in range(len(words)):
            if words[i] in self.map:
                self.map[words[i]].append(i)
            else:
                self.map[words[i]] = [i]

    def shortest(self, word1, word2):
        idxs1 = self.map[word1] # array
        idxs2 = self.map[word2] # array
        idx1 = 0
        idx2 = 0
        minDiff = sys.maxsize

        while idx1 < len(idxs1) and idx2 < len(idxs2):
            minDiff = min(minDiff, abs(idxs1[idx1] - idxs2[idx2]))
            if idxs1[idx1] < idxs2[idx2]:
                idx1 += 1
            else:
                idx2 += 1
        # Since the indexes array generated by iterating the words, they are sorted.
        # Even though we does not finish traversing the longer index array, we have
        # found the smallest difference.
        return minDiff
